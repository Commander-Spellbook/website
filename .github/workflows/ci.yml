name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 */2 * * *"

jobs:
  # install:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout üõé
  #       uses: actions/checkout@master

  #       # only install dependencies using
  #       # https://github.com/cypress-io/github-action
  #       # will restore / create folders
  #       #   ~/.npm
  #       #   ~/.cache/Cypress
  #     - name: Setup Node ‚¨¢
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #     - name: Install üì¶
  #       uses: cypress-io/github-action@v5
  #       with:
  #         runTests: false

  # linter:
  #   runs-on: ubuntu-20.04
  #   needs: install
  #   steps:
  #     - name: Checkout üõéÔ∏è
  #       uses: actions/checkout@v3

  #     - name: Setup Node ‚¨¢
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Install üì¶
  #       uses: cypress-io/github-action@v5
  #       with:
  #         runTests: false

  #     - name: Run linter üëÄ
  #       run: npm run lint

  # unit-tests:
  #   runs-on: ubuntu-20.04
  #   needs: install
  #   steps:
  #     - name: Checkout üõéÔ∏è
  #       uses: actions/checkout@v3

  #     - name: Setup Node ‚¨¢
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Install üì¶
  #       uses: cypress-io/github-action@v5
  #       with:
  #         runTests: false

  #     - name: Run unit tests üß™
  #       run: npm run download-data && npm test

  # integration-tests:
  #   runs-on: ubuntu-20.04
  #   needs: install
  #   steps:
  #     - name: Checkout üõéÔ∏è
  #       uses: actions/checkout@v3

  #     - name: Setup Node ‚¨¢
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Install üì¶
  #       uses: cypress-io/github-action@v5
  #       with:
  #         runTests: false

  #     - name: Run Integration tests üíª
  #       run: npm run test:integration
  #       env:
  #         NODE_ENV: development
  #         USE_FIREBASE_EMULATORS: true

  changelog_check:
    # only run this check from the main branch
    # commented out for testing
    # if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.repository_owner == 'Commander-Spellbook'
    runs-on: ubuntu-20.04
    outputs:
      should_deploy: ${{ steps.changelog_result.outputs.result }}
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install üì¶
        uses: cypress-io/github-action@v5
        with:
          runTests: false

      - id: changelog_result
        run: npm run check-changelog && cat ./deploy-result >> "$GITHUB_OUTPUT"

  cancelled_deploy_alert:
    if: needs.changelog_check.outputs.deploy_result == 'NO_COMBO_CHANGES'
    runs-on: ubuntu-20.04
    needs: [changelog_check]
    steps:
      - name: hello
        run: echo "Won't deploy!"

  succesful_deploy_alert:
    if: needs.changelog_check.outputs.deploy_result == 'SHOULD_DEPLOY'
    runs-on: ubuntu-20.04
    # needs: [changelog_check, deploy]
    needs: [changelog_check]
    steps:
      - name: hello
        run: echo "Will deploy!"

  # deploy:
  #   # only deploy from the main branch
  #   # and the changelog check indicates
  #   # that there are changes to deploy
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.repository_owner == 'Commander-Spellbook' && needs.changelog_check.outputs.deploy_result == 'SHOULD_DEPLOY'
  #   concurrency: production_deploy
  #   runs-on: ubuntu-20.04
  #   needs: [linter, unit-tests, integration-tests, changelog_check]
  #   steps:
  #     - name: Checkout üõéÔ∏è
  #       uses: actions/checkout@v3

  #     - name: Setup Node ‚¨¢
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Install üì¶
  #       uses: cypress-io/github-action@v5
  #       with:
  #         runTests: false

  #     - name: Deploy Firebase üî•
  #       run: npm run firebase:deploy:ci
  #       env:
  #         NODE_ENV: production
  #         FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}

  #     - name: Download Data ‚§µÔ∏è
  #       run: npm run download-data
  #       env:
  #         NODE_ENV: production
  #         FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}
  #         FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
  #         FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
  #         FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  #         FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
  #         FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
  #         FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}

  #     - name: Build Frontend Site üèóÔ∏è
  #       run: npm run build-frontend
  #       env:
  #         NODE_ENV: production
  #         FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}
  #         FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
  #         FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
  #         FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  #         FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
  #         FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
  #         FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}

  #     - name: Configure AWS Credentials „äôÔ∏è
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Deploy to S3 üõ´
  #       run: aws s3 sync ./dist/ s3://commanderspellbook.com --delete

  #     - name: Bust Cloudfront Cache üë•
  #       if: ${{ github.event_name != 'pull_request'}}
  #       run: aws cloudfront create-invalidation --distribution-id EOJD6575ATAH3 --paths "/*"

  #     - name: Discord notification
  #       env:
  #         DISCORD_WEBHOOK: ${{ secrets.DISCORD_DEPLOY_WEBHOOK_URL }}
  #       uses: Ilshidur/action-discord@master
  #       with:
  #         args: "Commander Spellbook website has been deployed."
