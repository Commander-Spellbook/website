name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 */2 * * *"

env:
  DISCORD_DEPLOY_WEBHOOK_URL: ${{ secrets. DISCORD_DEPLOY_WEBHOOK_URL }}
  DISCORD_CHANGELOG_WEBHOOK_URL: ${{ secrets. DISCORD_CHANGELOG_WEBHOOK_URL }}

jobs:
  setup:
    runs-on: ubuntu-20.04
    outputs:
      workflow_id: ${{ steps.generate-uuid.outputs.uuid }}
    steps:
      - name: Checkout üõé
        uses: actions/checkout@master

      - name: Setup Node ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Create Workflow ID üÜî
        id: generate-uuid
        uses: filipstefansson/uuid-action@v1

      - name: Cache node modules üóÉ
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          # npm packages are cached in node_modules
          # npm also provides a local cache in .npm
          # Cypress binary is stored in ~/.cache
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-build-

      - name: Install Node Modules üì¶
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Cache Downloaded Data ‚è¨
        id: cache-downloaded-data
        uses: actions/cache@v3
        with:
          path: |
            autocomplete-data
            external-data
            frontend/static/api/combo-data.json
            frontend/static/changelog.json
          key: ${{ runner.os }}-download-data-${{ steps.generate-uuid.outputs.uuid }}
          restore-keys: |
            ${{ runner.os }}-download-data-

      - name: Download Data ‚¨áÔ∏è
        if: steps.cache-downloaded-data.outputs.cache-hit != 'true'
        env:
          NODE_ENV: production
          FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: npm run download-data

  changelog_check:
    # only run this check from the main branch
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.repository_owner == 'Commander-Spellbook'
    runs-on: ubuntu-20.04
    needs: setup
    concurrency: production_deploy
    outputs:
      should_deploy: ${{ steps.changelog_result.outputs.should_deploy }}
      deploy_reason: ${{ steps.changelog_result.outputs.deploy_reason }}
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore node modules from cache üì¶
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-build-

      - name: Install üì¶
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore Downloaded Data ‚è¨
        id: cache-downloaded-data
        uses: actions/cache@v3
        with:
          path: |
            autocomplete-data
            external-data
            frontend/static/api/combo-data.json
            frontend/static/changelog.json
          key: ${{ runner.os }}-download-data-${{ needs.setup.outputs.workflow_id }}
          restore-keys: |
            ${{ runner.os }}-download-data-

      - name: Download Data ‚¨áÔ∏è
        if: steps.cache-downloaded-data.outputs.cache-hit != 'true'
        env:
          NODE_ENV: production
          FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: npm run download-data

      - name: Compare Changelog ü™µ
        id: changelog_result
        run: npm run check-changelog

  linter:
    runs-on: ubuntu-20.04
    needs: setup
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore node modules from cache üì¶
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-build-

      - name: Install üì¶
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run linter üëÄ
        run: npm run lint

  unit-tests:
    runs-on: ubuntu-20.04
    needs: setup
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore node modules from cache üì¶
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-build-

      - name: Install üì¶
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore Downloaded Data ‚è¨
        id: cache-downloaded-data
        uses: actions/cache@v3
        with:
          path: |
            autocomplete-data
            external-data
            frontend/static/api/combo-data.json
            frontend/static/changelog.json
          key: ${{ runner.os }}-download-data-${{ needs.setup.outputs.workflow_id }}
          restore-keys: |
            ${{ runner.os }}-download-data-

      - name: Download Data ‚¨áÔ∏è
        if: steps.cache-downloaded-data.outputs.cache-hit != 'true'
        env:
          NODE_ENV: production
          FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: npm run download-data

      - name: Run unit tests üß™
        run: npm test

  integration-tests:
    runs-on: ubuntu-20.04
    needs: setup
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore node modules from cache üì¶
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-build-

      - name: Install üì¶
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore Downloaded Data ‚è¨
        id: cache-downloaded-data
        uses: actions/cache@v3
        with:
          path: |
            autocomplete-data
            external-data
            frontend/static/api/combo-data.json
            frontend/static/changelog.json
          key: ${{ runner.os }}-download-data-${{ needs.setup.outputs.workflow_id }}
          restore-keys: |
            ${{ runner.os }}-download-data-

      - name: Download Data ‚¨áÔ∏è
        if: steps.cache-downloaded-data.outputs.cache-hit != 'true'
        env:
          NODE_ENV: production
          FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: npm run download-data

      - name: Run Integration tests üíª
        run: npm run test:integration
        env:
          NODE_ENV: development
          USE_FIREBASE_EMULATORS: true

  cancel-deploy-notification:
    # only send a message about cancelling deploy from the main branch
    # and the changelog check indicates that there are no changes to deploy
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.repository_owner == 'Commander-Spellbook' && needs.changelog_check.outputs.should_deploy == 'NO'
    runs-on: ubuntu-20.04
    needs: [setup, changelog_check]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore node modules from cache üì¶
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-build-

      - name: Install üì¶
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Send deploy cancelled notification ‚úâÔ∏è
        run: npm run discord-webhook:cancel-deploy

  deploy:
    # only deploy from the main branch
    # and the changelog check indicates
    # that there are changes to deploy
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.repository_owner == 'Commander-Spellbook' && needs.changelog_check.outputs.should_deploy == 'YES'
    concurrency: production_deploy
    runs-on: ubuntu-20.04
    needs: [setup, linter, unit-tests, integration-tests, changelog_check]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore node modules from cache üì¶
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-build-

      - name: Install üì¶
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore Downloaded Data ‚è¨
        id: cache-downloaded-data
        uses: actions/cache@v3
        with:
          path: |
            autocomplete-data
            external-data
            frontend/static/api/combo-data.json
            frontend/static/changelog.json
          key: ${{ runner.os }}-download-data-${{ needs.setup.outputs.workflow_id }}
          restore-keys: |
            ${{ runner.os }}-download-data-

      - name: Download Data ‚¨áÔ∏è
        if: steps.cache-downloaded-data.outputs.cache-hit != 'true'
        env:
          NODE_ENV: production
          FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: npm run download-data

      - name: Send Deploy Start Notification ‚úâÔ∏è
        run: npm run discord-webhook:start-deploy

      - name: Deploy Firebase üî•
        run: npm run firebase:deploy:ci
        env:
          NODE_ENV: production
          FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}

      - name: Build Frontend Site üèóÔ∏è
        run: npm run build-frontend
        env:
          NODE_ENV: production
          FIREBASE_DEPLOYMENT_TOKEN: ${{ secrets.FIREBASE_DEPLOYMENT_TOKEN }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}

      - name: Configure AWS Credentials „äôÔ∏è
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3 üõ´
        run: aws s3 sync ./dist/ s3://commanderspellbook.com --delete

      - name: Bust Cloudfront Cache üë•
        run: aws cloudfront create-invalidation --distribution-id EOJD6575ATAH3 --paths "/*"

      - name: Send Deploy Failed Notification ‚úâÔ∏è
        if: ${{ failure() }}
        run: npm run discord-webhook:failed-deploy

  finish-deploy-notification:
    runs-on: ubuntu-20.04
    needs: [changelog_check, deploy]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore node modules from cache üì¶
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-modules-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-build-

      - name: Install üì¶
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Send deploy succeeded notification ‚úâÔ∏è
        env:
          DEPLOY_REASON: ${{needs.changelog_check.outputs.deploy_reason}}
        run: npm run discord-webhook:finish-deploy
