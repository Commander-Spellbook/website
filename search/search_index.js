const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Development Docs This documentation is rendered as a website on GitHub Pages . Any change to markdown files will be deployed after it gets merged into the main branch. Getting Started The site requires node v16 and npm 8 (which comes installed with node@16) to run locally, since it utilizes npm workspaces to structure the repo. If you are already using the Node Version Manager (nvm) tool, you can run nvm install in the directory to get the correct version of node. Once you have installed node, you can install the project's dependencies: npm install Frontend App Installation and setup Creating a new page Creating a component Backend API The backend (auth, api, database) is all managed by a separate API outside of this repo. Automated Testing Unit Testing Integration Testing Note: There is currently an issue with firebase-tools@v11.19.0 that prevents the emulators from running . We pin firebase-tools to v11.18.0 until this is resolved. The cypress-firebase@3 package made some changes to only support Node v16 and higher, so the published code has some JavaScript that is only runnbale in Node v16 and higher. this would normally be fine, but Cypress has some weird behavior where it bundles all it's testing code for the browser using whatever Webpack config is used in the project, and since the Nuxt Webpack config is not exposed easilly, it's become difficult to figure out how to resolve the problem. This may get resolved automatically when the site is upgraded to Nuxt@3 , but for now, we must pin to cypress-firebase@2.x.y in order for the integration tests to run.","title":"Development Docs"},{"location":"index.html#development-docs","text":"This documentation is rendered as a website on GitHub Pages . Any change to markdown files will be deployed after it gets merged into the main branch.","title":"Development Docs"},{"location":"index.html#getting-started","text":"The site requires node v16 and npm 8 (which comes installed with node@16) to run locally, since it utilizes npm workspaces to structure the repo. If you are already using the Node Version Manager (nvm) tool, you can run nvm install in the directory to get the correct version of node. Once you have installed node, you can install the project's dependencies: npm install","title":"Getting Started"},{"location":"index.html#frontend-app","text":"Installation and setup Creating a new page Creating a component","title":"Frontend App"},{"location":"index.html#backend-api","text":"The backend (auth, api, database) is all managed by a separate API outside of this repo.","title":"Backend API"},{"location":"index.html#automated-testing","text":"Unit Testing Integration Testing Note: There is currently an issue with firebase-tools@v11.19.0 that prevents the emulators from running . We pin firebase-tools to v11.18.0 until this is resolved. The cypress-firebase@3 package made some changes to only support Node v16 and higher, so the published code has some JavaScript that is only runnbale in Node v16 and higher. this would normally be fine, but Cypress has some weird behavior where it bundles all it's testing code for the browser using whatever Webpack config is used in the project, and since the Nuxt Webpack config is not exposed easilly, it's become difficult to figure out how to resolve the problem. This may get resolved automatically when the site is upgraded to Nuxt@3 , but for now, we must pin to cypress-firebase@2.x.y in order for the integration tests to run.","title":"Automated Testing"},{"location":"frontend/SUMMARY.html","text":"Installation and setup Creating a new page Creating a component","title":"SUMMARY"},{"location":"frontend/components.html","text":"Components Create a vue component in the components directory. If it's a component specific to a page, nest it in a directory with the same name as the the page. The component name should be at least 2 words. This is a linting rule to prevent colliding with exisitng HTML DOM nodes.","title":"Creating a component"},{"location":"frontend/components.html#components","text":"Create a vue component in the components directory. If it's a component specific to a page, nest it in a directory with the same name as the the page. The component name should be at least 2 words. This is a linting rule to prevent colliding with exisitng HTML DOM nodes.","title":"Components"},{"location":"frontend/installation-and-setup.html","text":"Frontend App Setup The frontend uses Nuxt@v2 to create the app. Installation Requirements See the Getting Started instructions for details about installing node. Build Setup # serve with hot reload at localhost:3000, specify PORT=<whatever> to change the port $ npm run dev If you want to see how the app will behave in production, build and run it: # build for production (this will take a while) $ npm run build-frontend # runs the site in prod mode using the generated pages from the build-frontend step $ npm start For detailed explanation on how things work, check out Nuxt.js docs .","title":"Installation and setup"},{"location":"frontend/installation-and-setup.html#frontend-app-setup","text":"The frontend uses Nuxt@v2 to create the app.","title":"Frontend App Setup"},{"location":"frontend/installation-and-setup.html#installation-requirements","text":"See the Getting Started instructions for details about installing node.","title":"Installation Requirements"},{"location":"frontend/installation-and-setup.html#build-setup","text":"# serve with hot reload at localhost:3000, specify PORT=<whatever> to change the port $ npm run dev If you want to see how the app will behave in production, build and run it: # build for production (this will take a while) $ npm run build-frontend # runs the site in prod mode using the generated pages from the build-frontend step $ npm start For detailed explanation on how things work, check out Nuxt.js docs .","title":"Build Setup"},{"location":"frontend/pages.html","text":"Pages Create a vue component in the pages directory, where the name of the file is the path a user will navigate to in the url. In general, try to keep page logic simple. Pull any complex logic out into a component in the components directory in a folder with the same name as the route.","title":"Creating a new page"},{"location":"frontend/pages.html#pages","text":"Create a vue component in the pages directory, where the name of the file is the path a user will navigate to in the url. In general, try to keep page logic simple. Pull any complex logic out into a component in the components directory in a folder with the same name as the route.","title":"Pages"},{"location":"testing/integration-testing.html","text":"Integration Testing Our integration tests use Cypress as our test runner. What to test Unlike unit tests, we really only want to test broad strokes behavior. The most common usages of the app, to ensure the functionality of the app remains unbroken. How to Run the Tests Run the app npm run dev Run the tests npm run cy:run Videos/Screenshots By default, because it takes so long to process video, we have the video and screenshot capabilities turned off. If it's useful to inspect the video of what happened after the tests run, you can append this config flag to the test command: npm run cy:run -- --config video=true,videoUploadOnPasses=true,screenshotOnRunFailure=true","title":"Integration Testing"},{"location":"testing/integration-testing.html#integration-testing","text":"Our integration tests use Cypress as our test runner.","title":"Integration Testing"},{"location":"testing/integration-testing.html#what-to-test","text":"Unlike unit tests, we really only want to test broad strokes behavior. The most common usages of the app, to ensure the functionality of the app remains unbroken.","title":"What to test"},{"location":"testing/integration-testing.html#how-to-run-the-tests","text":"Run the app npm run dev Run the tests npm run cy:run","title":"How to Run the Tests"},{"location":"testing/integration-testing.html#videosscreenshots","text":"By default, because it takes so long to process video, we have the video and screenshot capabilities turned off. If it's useful to inspect the video of what happened after the tests run, you can append this config flag to the test command: npm run cy:run -- --config video=true,videoUploadOnPasses=true,screenshotOnRunFailure=true","title":"Videos/Screenshots"},{"location":"testing/unit-testing.html","text":"Unit Testing We use jest as our test runner. Any new features added will need to be thoroughly unit tested. If you are unfamiliar with unit testing, but want to make a change, go ahead and open a PR and ask for help getting unit tests set up for your feature. To run tests for all workpaces, run: npm test Frontend Unit Tests To run (and continuoulsly watch for changes) on just the frontend workspace, run: npm rum test:watch-frontend To watch only a particular directory (such as only running the tests against the /test/pages) npm rum test:watch-frontend test/pages/ Backend Unit Tests To run (and continuoulsly watch for changes) on just the frontend workspace, run: npm rum test:watch-backend To watch only a particular directory (such as only running the tests against the /test/db/ directory) npm rum test:watch-backend test/db/","title":"Unit Testing"},{"location":"testing/unit-testing.html#unit-testing","text":"We use jest as our test runner. Any new features added will need to be thoroughly unit tested. If you are unfamiliar with unit testing, but want to make a change, go ahead and open a PR and ask for help getting unit tests set up for your feature. To run tests for all workpaces, run: npm test","title":"Unit Testing"},{"location":"testing/unit-testing.html#frontend-unit-tests","text":"To run (and continuoulsly watch for changes) on just the frontend workspace, run: npm rum test:watch-frontend To watch only a particular directory (such as only running the tests against the /test/pages) npm rum test:watch-frontend test/pages/","title":"Frontend Unit Tests"},{"location":"testing/unit-testing.html#backend-unit-tests","text":"To run (and continuoulsly watch for changes) on just the frontend workspace, run: npm rum test:watch-backend To watch only a particular directory (such as only running the tests against the /test/db/ directory) npm rum test:watch-backend test/db/","title":"Backend Unit Tests"}]}; var __search = { index: Promise.resolve(local_index) }